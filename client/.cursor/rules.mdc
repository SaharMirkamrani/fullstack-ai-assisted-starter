---
description:
globs:
alwaysApply: false
---
# Frontend AI Coding Rules

## üéØ Core Principles

- **Security First**: Validate all inputs, sanitize data, implement proper authentication
- **Type Safety**: Use TypeScript for all new code with strict mode
- **Performance**: Optimize bundle size, implement code splitting, minimize re-renders
- **Accessibility**: Follow WCAG guidelines, use semantic HTML, implement ARIA
- **Mobile-First**: Responsive design, touch-friendly interactions

## üèóÔ∏è Architecture & Structure

### Component Pattern
```typescript
interface ComponentProps {
  // Define props with proper types
}

export const Component: React.FC<ComponentProps> = ({ prop1, prop2 }) => {
  // Hooks first
  const [state, setState] = useState();
  
  // Event handlers
  const handleEvent = useCallback(() => {
    // Implementation
  }, []);
  
  // Memoized values
  const memoizedValue = useMemo(() => {
    return expensiveCalculation(prop1, prop2);
  }, [prop1, prop2]);
  
  return (
    <div>
      {/* JSX */}
    </div>
  );
};
```

### File Organization
- `/components/` - Reusable UI components
- `/pages/` - Route-level components  
- `/hooks/` - Custom React hooks
- `/utils/` - Utility functions
- `/types/` - TypeScript definitions
- `/services/` - API calls

## üîí Security Guidelines

### Input Validation
```typescript
// Always validate user inputs
const validateEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

// Sanitize data before rendering
const sanitizeHtml = (html: string): string => {
  return DOMPurify.sanitize(html);
};
```

### Authentication
```typescript
// Secure token management
const useAuth = () => {
  const [token, setToken] = useState<string | null>(null);
  
  const login = useCallback(async (credentials: LoginCredentials) => {
    try {
      const response = await api.post('/auth/login', credentials);
      const { token } = response.data;
      setToken(token);
      // Store in httpOnly cookie, not localStorage
    } catch (error) {
      // Handle error securely
    }
  }, []);
  
  return { token, login };
};
```

### API Security
```typescript
// Secure API client
const api = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL,
  timeout: 10000,
  withCredentials: true, // Include CSRF tokens
});

// Request interceptor for CSRF
api.interceptors.request.use(async (config) => {
  if (config.method !== 'get') {
    const csrfToken = await getCSRFToken();
    config.headers['X-CSRF-Token'] = csrfToken;
  }
  return config;
});
```

## üé® Styling & UI

### CSS-in-JS (Preferred)
```typescript
const StyledComponent = styled.div`
  display: flex;
  align-items: center;
  gap: 1rem;
  
  @media (max-width: 768px) {
    flex-direction: column;
  }
`;
```

### CSS Classes
- Use BEM methodology
- Keep classes semantic
- Avoid deep nesting (max 3 levels)

## üîß State Management

### Local State
- `useState` for simple state
- `useReducer` for complex state logic

### Global State
- React Context for simple global state
- Redux Toolkit for complex state
- Zustand for lightweight state

## üì° API Integration

### Data Fetching Pattern
```typescript
const useApiData = <T>(endpoint: string) => {
  const [data, setData] = useState<T | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const response = await api.get(endpoint);
        setData(response.data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [endpoint]);

  return { data, loading, error };
};
```

## üß™ Testing

### Component Testing
```typescript
describe('Component', () => {
  it('should render correctly', () => {
    render(<Component prop1="test" />);
    expect(screen.getByText('test')).toBeInTheDocument();
  });

  it('should handle user interactions', () => {
    render(<Component />);
    fireEvent.click(screen.getByRole('button'));
    // Assert expected behavior
  });

  it('should handle error states', () => {
    // Test error scenarios
  });
});
```

## üöÄ Performance

### Optimization
- Use `React.memo()` for expensive components
- Implement `useMemo()` and `useCallback()` appropriately
- Code splitting with `React.lazy()`
- Optimize images and assets

### Bundle Optimization
```typescript
// Dynamic imports for code splitting
const HeavyComponent = lazy(() => import('./HeavyComponent'));

// Route-based splitting
const HomePage = lazy(() => import('./pages/HomePage'));
```

## üì± Mobile & Accessibility

### Touch Interactions
- Minimum 44px touch targets
- Proper touch feedback
- Test on actual devices

### Accessibility
```typescript
// Semantic HTML with ARIA
<button 
  aria-label="Close modal"
  onClick={handleClose}
>
  <Icon name="close" />
</button>

// Keyboard navigation
<div role="button" tabIndex={0} onKeyDown={handleKeyDown}>
  Clickable div
</div>
```

## üéØ Code Quality

### Naming Conventions
- PascalCase for components
- camelCase for variables/functions
- UPPER_SNAKE_CASE for constants
- Descriptive, meaningful names

### Error Handling
```typescript
// Error boundaries
class ErrorBoundary extends Component {
  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    // Log error securely
    console.error('Error caught by boundary:', error, errorInfo);
  }
  
  render() {
    if (this.state.hasError) {
      return <ErrorFallback />;
    }
    return this.props.children;
  }
}
```

### Comments & Documentation
- Comment complex business logic
- Document component props with JSDoc
- Explain "why" not "what"
- Keep comments up to date

## ‚ö†Ô∏è Security Checklist

- [ ] Validate all user inputs
- [ ] Sanitize data before rendering
- [ ] Use HTTPS in production
- [ ] Implement proper authentication
- [ ] Use secure storage (httpOnly cookies)
- [ ] Handle errors without exposing sensitive data
- [ ] Implement CSRF protection
- [ ] Use Content Security Policy headers
- [ ] Regular dependency updates
- [ ] Security testing and audits
